import {useState} from "react";
import {Box, Button, Heading, Input, Text} from "@chakra-ui/react";
import {MovieCard} from "components/MovieCard";
import styles from "./AddByImdbPage.module.css";
import {NavigationBar} from "components/NavigationBar";
import {useMovieSearch} from "hooks/api/useMovieSearch.ts";
import {useUser} from "hooks/api/useUser.ts";
import {toaster} from "components/ui/toaster"; // üëà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—Å—Ç–µ—Ä

export const AddByImdbPage = () => {
    const [imdbUrl, setImdbUrl] = useState<string>("");
    const [added, setAdded] = useState<boolean>(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    const {addToFavorites} = useUser();
    const {mutateAsync: addToFavoritesAction} = addToFavorites;

    const extractImdbId = (url: string): string | null => {
        const match = url.match(/tt\d+/);
        return match ? match[0] : null;
    };

    const imdbID = extractImdbId(imdbUrl);
    const {data: movieData, isFetching, error} = useMovieSearch(imdbID);

    const handleAddToFavorites = async () => {
        if (!movieData) return;

        try {
            await addToFavoritesAction({id: movieData.id, type: movieData.media_type});

            setAdded(true); // ‚úÖ –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            toaster.create({ // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                title: "–î–æ–±–∞–≤–ª–µ–Ω–æ!",
                type: "success",
                description: `${movieData.title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.`,
            });
        } catch {
            toaster.create({ // üî¥ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞
                title: "–û—à–∏–±–∫–∞",
                type: "error",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
            });
        }
    };

    return (
        <>
            <NavigationBar/>
            <Box className={styles.container}>
                <Heading as="h2" className={styles.heading}>–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –ø–æ IMDb ID</Heading>

                <Box className={styles.searchContainer}>
                    <Input
                        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É IMDb (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.imdb.com/title/tt0804484/)"
                        value={imdbUrl}
                        onChange={(e) => setImdbUrl(e.target.value)}
                        className={styles.input}
                    />

                    <Button colorScheme="blue" onClick={() => setImdbUrl(imdbUrl)}>
                        üîç –ù–∞–π—Ç–∏
                    </Button>
                </Box>

                {isFetching && <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>}
                {error && <Text color="red.500">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ</Text>}

                {movieData && (
                    <MovieCard
                        movie={movieData}
                        actionButton={
                            <Button
                                colorScheme={added ? "gray" : "green"}
                                onClick={handleAddToFavorites}
                                disabled={added} // ‚úÖ –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                            >
                                {added ? "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
                            </Button>
                        }
                    />
                )}
            </Box>
        </>
    );
};