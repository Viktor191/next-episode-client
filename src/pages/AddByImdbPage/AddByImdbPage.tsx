import {useState} from "react";
import {Box, Button, Heading, Input, Text} from "@chakra-ui/react";
import {apiClient} from "helpers/apiClient";
import {MovieCard} from "components/MovieCard";
import styles from "./AddByImdbPage.module.css";

interface Movie {
    id: number;
    title: string;
    original_title?: string;
    overview: string;
    vote_average?: number;
    release_date?: string;
    poster_path: string;
    media_type: "movie" | "tv";
}

export const AddByImdbPage = () => {
    const [imdbUrl, setImdbUrl] = useState<string>("");
    const [movieData, setMovieData] = useState<Movie | null>(null);
    const [error, setError] = useState<string>("");

    // üîç –ò–∑–≤–ª–µ–∫–∞–µ–º IMDb ID –∏–∑ URL
    const extractImdbId = (url: string): string | null => {
        const match = url.match(/tt\d+/);
        return match ? match[0] : null;
    };

    // üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ IMDb ID
    const handleSearch = async () => {
        setError("");
        setMovieData(null);

        const imdbID = extractImdbId(imdbUrl);
        if (!imdbID) {
            setError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMDb ID.");
            return;
        }

        try {
            const response = await apiClient.get(`/shows/imdb/${imdbID}`);
            setMovieData(response.data);
        } catch (err) {
            setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${(err as Error).message}`);
        }
    };

    const handleAddToFavorites = async (movie: Movie) => {
        try {
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", {type: movie.media_type}); // üîç –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            await apiClient.post(`/shows/${movie.id}/favorites`, {
                type: movie.media_type, // üü¢ id –Ω–µ –Ω—É–∂–µ–Ω –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
            });
            alert("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
        } catch (err: unknown) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", (err as Error).message);
            alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ${(err as Error).message}`);
        }
    };

    return (
        <Box className={styles.container}>
            <Heading as="h2" className={styles.heading}>
                –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –ø–æ IMDb ID
            </Heading>

            {/* üîó –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ IMDb */}
            <Input
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É IMDb (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.imdb.com/title/tt0804484/)"
                value={imdbUrl}
                onChange={(e) => setImdbUrl(e.target.value)}
                className={styles.input}
            />

            <Button colorScheme="blue" mt={4} onClick={handleSearch}>
                üîç –ù–∞–π—Ç–∏
            </Button>

            {/* ‚ö° –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ */}
            {error && <Text color="red.500">{error}</Text>}

            {/* üé¨ –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ */}
            {movieData && (
                <MovieCard
                    movie={movieData}
                    actionButton={
                        <Button colorScheme="green" onClick={() => handleAddToFavorites(movieData)}>
                            –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                        </Button>
                    }
                />
            )}
        </Box>
    );
};